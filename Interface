import tkinter as tk
from tkinter import ttk, messagebox
import requests
from tkinter import simpledialog

def create_user():
    first_name = simpledialog.askstring("Добавление пользователя", "Введите имя:")
    if not first_name:
        return
    last_name = simpledialog.askstring("Добавление пользователя", "Введите фамилию:")
    if not last_name:
        return
    academic_rank = simpledialog.askstring("Добавление пользователя", "Введите академическое звание:")
    if academic_rank is None:
        return
    experience = simpledialog.askinteger("Добавление пользователя", "Введите опыт (лет):")
    if experience is None:
        return

    payload = {
        "first_name": first_name,
        "last_name": last_name,
        "academic_rank": academic_rank,
        "experience": experience
    }

    try:
        response = requests.post("http://127.0.0.1:5000/users", json=payload)
        if response.status_code == 201:
            messagebox.showinfo( "Пользователь успешно добавлен")
        else:
            messagebox.showerror("Ошибка", f"Не удалось добавить пользователя: {response.text}")
    except Exception as e:
        messagebox.showerror("Ошибка", f"Ошибка запроса: {e}")

def delete_user():
    user_id = simpledialog.askinteger("Удаление пользователя", "Введите ID пользователя для удаления:")
    if not user_id:
        return

    confirm = messagebox.askyesno("Подтверждение", f"Вы уверены, что хотите удалить пользователя с ID {user_id}?")
    if not confirm:
        return

    try:
        response = requests.delete(f"http://127.0.0.1:5000/users/{user_id}")
        if response.status_code == 200:
            messagebox.showinfo("Пользователь удалён")
        else:
            messagebox.showerror("Ошибка", f"Не удалось удалить пользователя: {response.text}")
    except Exception as e:
        messagebox.showerror("Ошибка", f"Ошибка запроса: {e}")


def main_window(role):
    main_win = tk.Toplevel()
    main_win.title("Рекомендации ИИ")
    main_win.geometry("700x600")
    main_win.resizable(False, False)

    ttk.Label(main_win, text="Рекомендации ИИ по проекту", font=("Times New Roman", 16, "bold")).pack(pady=10)

    project_entry = ttk.Entry(main_win, width=50, font=("Times New Roman", 12))
    project_entry.pack(pady=5)
    project_entry.insert(0, "")

    output_box = tk.Text(main_win, wrap="word", font=("Times New Roman", 11), height=15)
    output_box.pack(fill="both", expand=True, padx=10, pady=10)

    def get_recommendation():
        project_name = project_entry.get().strip()
        if not project_name:
            return
        try:
            response = requests.post("http://127.0.0.1:5000/run-recommendation", json={"project_name": project_name})
            result = response.json()
            output_box.delete("1.0", tk.END)
            output_box.insert(tk.END, result.get('result', 'Нет ответа от сервера'))
        except Exception as e:
            output_box.insert(tk.END, f"Ошибка: {e}")

    ttk.Button(main_win, text="Запросить рекомендацию от ИИ", command=get_recommendation).pack(pady=10)

    button_frame = ttk.Frame(main_win)
    button_frame.pack(pady=15)


    if role == "admin":
        def create_user():
            first_name = simpledialog.askstring("Добавление пользователя", "Введите имя:")
            if not first_name:
                return
            last_name = simpledialog.askstring("Добавление пользователя", "Введите фамилию:")
            if not last_name:
                return
            academic_rank = simpledialog.askstring("Добавление пользователя", "Введите академическое звание:")
            if academic_rank is None:
                return
            experience = simpledialog.askinteger("Добавление пользователя", "Введите опыт (лет):")
            if experience is None:
                return

            payload = {
                "first_name": first_name,
                "last_name": last_name,
                "academic_rank": academic_rank,
                "experience": experience
            }

            try:
                response = requests.post("http://127.0.0.1:5000/users", json=payload)
                if response.status_code == 201:
                    messagebox.showinfo( "Пользователь успешно добавлен")
                else:
                    messagebox.showerror("Ошибка", f"Не удалось добавить пользователя: {response.text}")
            except Exception as e:
                messagebox.showerror("Ошибка", f"Ошибка запроса: {e}")

        def delete_user():
            user_id = simpledialog.askinteger("Удаление пользователя", "Введите ID пользователя для удаления:")
            if not user_id:
                return

            confirm = messagebox.askyesno("Подтверждение",
                                          f"Вы уверены, что хотите удалить пользователя с ID {user_id}?")
            if not confirm:
                return

            try:
                response = requests.delete(f"http://127.0.0.1:5000/users/{user_id}")
                if response.status_code == 200:
                    messagebox.showinfo(" ", "Пользователь удалён")
                else:
                    messagebox.showerror("Ошибка", f"Не удалось удалить пользователя: {response.text}")
            except Exception as e:
                messagebox.showerror("Ошибка", f"Ошибка запроса: {e}")

        ttk.Button(button_frame, text="Добавить пользователя", command=create_user).grid(row=0, column=0, padx=5)
        ttk.Button(button_frame, text="Удалить пользователя", command=delete_user).grid(row=0, column=1, padx=5)

    def export_report():
        try:
            response = requests.get("http://127.0.0.1:5000/report/users")
            with open("users_report.xlsx", "wb") as f:
                f.write(response.content)
            messagebox.showinfo("Готово", "Отчет сохранен как users_report.xlsx")
        except Exception as e:
            messagebox.showerror("Ошибка", str(e))

    ttk.Button(button_frame, text="Сформировать отчет", command=export_report).grid(row=0, column=3, padx=5)

def login():
    email = email_entry.get().strip()
    password = password_entry.get().strip()

    if not email or not password:
        messagebox.showwarning("Введите email и пароль")
        return

    try:
        response = requests.post("http://127.0.0.1:5000/login", json={"email": email, "password": password})
        if response.status_code == 200:
            role = response.json().get("role", "user")
            login_window.destroy()
            main_window(role)
        else:
            messagebox.showerror("Ошибка", "Неверный email или пароль")
    except Exception as e:
        messagebox.showerror("Ошибка", f"Ошибка при соединении с сервером:\n{e}")

login_window = tk.Tk()
login_window.title("Вход")
login_window.geometry("300x170")
login_window.resizable(False, False)

ttk.Label(login_window, text="Email:").pack(pady=(10, 2))
email_entry = ttk.Entry(login_window, width=30)
email_entry.pack()

ttk.Label(login_window, text="Пароль:").pack(pady=(10, 2))
password_entry = ttk.Entry(login_window, width=30, show="*")
password_entry.pack()


login_button = ttk.Button(login_window, text="Войти", command=login, width=20)
login_button.pack(pady=15, ipadx=10)

login_window.mainloop()
